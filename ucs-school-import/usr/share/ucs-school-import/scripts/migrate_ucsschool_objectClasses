#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
#
# Copyright 2019 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

"""
Attach ucsschool object classes to all supported UCS@school objects.
"""

import logging
import optparse
import sys
from univention.admin.uldap import getAdminConnection
from logging.handlers import RotatingFileHandler
from ucsschool.lib.models.group import SchoolClass, WorkGroup, ComputerRoom
from ucsschool.lib.models.share import ClassShare, WorkGroupShare
from ucsschool.lib.models.computer import SchoolDCSlave, WindowsComputer, MacComputer, IPComputer
from ucsschool.lib.models.school import School

LOG_FILE = '/var/log/univention/ucsschool-objectClass-migration.log'
LOG_DEBUG_FMT = '%(asctime)s %(levelname)-5s %(funcName)s:%(lineno)d  %(message)s'
LOG_INFO_FMT = '%(message)s'
LOG_DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'

logger = logging.getLogger('UcsSchoolObjectClassesMigration')
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
handler.setLevel(logging.INFO)
handler.setFormatter(logging.Formatter(datefmt=LOG_DATETIME_FORMAT))
logger.addHandler(handler)
handler = RotatingFileHandler(LOG_FILE)
handler.setLevel(logging.DEBUG)
handler.setFormatter(logging.Formatter(LOG_DEBUG_FMT, LOG_DATETIME_FORMAT))
logger.addHandler(handler)

lo, po = getAdminConnection()

MIGRATION_CLASSES = (
	SchoolClass, WorkGroup, ComputerRoom, ClassShare, WorkGroupShare, SchoolDCSlave, WindowsComputer, MacComputer,
	IPComputer)

def migrate(schools):
	for school_name in schools:
		for klass in MIGRATION_CLASSES:
			logger.debug('=' * 80)
			logger.info('Migrating objects of type {!s} for {}'.format(klass, school_name))
			logger.debug('=' * 80)
			objects = klass.get_all(lo, school_name)
			for obj in objects:  # Should we check if object was already migrated?
				logger.info('Adding object classes to {!s}'.format(obj))
				udm_obj = obj.get_udm_object(lo)
				obj.set_default_options(udm_obj)
				udm_obj.modify()  # Modifying the UCS@school object deletes changed options and does not safe them.


if __name__ == '__main__':
	usage = '''
	%prog [<ou_name>]
	Adds LDAP object classes to all supported object types in the given OU. If no OU was given the script runs for all
	existing OU's.

	Arguments:
	<ou_name>		name of ou which objects shall be migrated. (Ignored at the moment)'''
	parser = optparse.OptionParser(usage=usage)
	(options, args,) = parser.parse_args()
	print(options)
	schools = []
	logger.debug('=' * 80)
	logger.debug('=' * 80)
	logger.info('Log file: %r', LOG_FILE)
	if len(args) > 1:
		parser.print_help()
		sys.exit(1)
	'''if len(args) > 0:
		School.get_all(lo, filter_str='name=')'''
	schools = [school.name for school in School.get_all(lo)]
	migrate(schools)
